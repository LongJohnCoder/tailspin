_code = "function insertSort(a) {\n    for (var sortedN = 1; sortedN < a.length; sortedN++) {\n        \/\/ Shift unsorted value downwards until it is sorted.\n        for (var i = sortedN; i > 0 && a[i] < a[i-1]; i--) {\n            swap(a, i, i-1);\n        }\n    }\n    \n    return a;\n}";
_support = "function swap(a, i, j) {\n    var t = a[i];\n    a[i] = a[j];\n    a[j] = t;\n}\n\nfunction run(a) {\n    // Convert data [{data:4, hash:\"9\"}, ...] so that we can treat it as numbers.\n    for (var i=0; i<a.length; i++) {\n      a[i].valueOf = function() {return this.data;};\n    }\n    insertSort(a);\n}";
_options = {"height":"270px"};
_visualisation = "<html>\n<head>\n<style type='text/css'>\n.chart rect {\n  fill: steelblue;\n}\n.chart rect.sorted {\n  fill: lightsteelblue;\n}\n.chart rect.index {\n  fill: red;\n}\n</style>\n<script src=\"http://d3js.org/d3.v2.js\"></script>\n<script type=\"text/javascript\">\nvar chart;\nvar width = 300;\nwindow.onload = function() {\n    // Setup the chart\n    chart = d3.select(\"#chart\").append(\"svg\")\n        .attr(\"class\", \"chart\")\n        .attr(\"width\", width)\n        .attr(\"height\", 256);\n    drawGraph(a, -1, -1, 100);\n}\n\nfunction rndNum() {\n    return 1 + Math.floor(Math.random()*20);\n}\n\nvar a = [];\nvar hashIndex = 0;\nfunction n(d) {\n    this.data = d;\n    // Save a hash so we can uniquely identify each number.\n    this.hash = \"\"+hashIndex;\n    hashIndex++;\n    this.valueOf = function() {return this.data;};\n}\n\nfor (var j=0; j<20; j++) {\n    a.push(new n(rndNum()));\n}\n\nfunction randomise() {\n    for (var j=0; j<20; j++) {\n        a[j].data = rndNum();\n    }\n    reset();\n    drawGraph(a, -1, -1, 100);\n    \n    var bars = chart.selectAll(\"rect\").data(a, function(d) {return d.hash;});\n    \n    bars.transition(100)\n        .attr(\"y\", function(d) { return 256 - d*10; })\n        .attr(\"height\", function(d) { return d*10; });\n}\nfunction reverse() {\n    for (var j=0; j<10; j++) {\n        t = a[j]; a[j] = a[19-j]; a[19-j] = t;\n    }\n    reset();\n    drawGraph(a, -1, -1, 100);\n}\n\nfunction args() {\n    return a;\n}\n\nfunction update(n, x, isRunning, duration, prev) {\n    if (duration < 0) {\n        return; // State-less visualisation.\n    }\n    if (x) {\n        var idx = x.lookupInScope(\"i\");\n        var sortedN = x.lookupInScope(\"sortedN\");\n        \n        drawGraph(a, idx, sortedN, duration);\n    }\n}\n\nvar oldI;\n\nfunction drawGraph(a, idx, sortedN, duration) {\n    var n = a.length;\n    var barWidth = Math.floor((width-20-2*(n-1))/n);\n    var barSpacing = barWidth+2;\n    \n    var bars = chart.selectAll(\"rect\").data(a, function(d) {return d.hash;});\n    \n    bars.enter().append(\"rect\")\n        .attr(\"y\", function(d) { return 256 - d*10; })\n        .attr(\"height\", function(d) { return d*10; })\n        .attr(\"width\", barWidth);\n    \n    bars.transition().duration(duration).attr(\"x\", function(d, i) { return barSpacing*i; });\n    if (idx!==oldI) {\n        bars.classed(\"index\", function(d, i) {return i===idx});\n        oldI = idx;\n    }\n    // Increase the sorted section when we have an index being moved down.\n    if (typeof idx !== \"undefined\") {\n        sortedN++;\n    }\n    bars.classed(\"sorted\", function(d, i) {return sortedN && i<sortedN});\n}\n</script>\n</head>\n<body>\n  <div style=\"position:absolute;padding:2px\">\n    <button onclick=\"randomise()\">Random</button>\n    <button onclick=\"reverse()\">Reverse</button>\n  </div>\n<div id=\"chart\"></div>\n</body>\n</html>";